### Type definitions saved at 2025-04-23T10:33:57.241Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  siteUrl: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean
  duotone: DuotoneGradient
  rotate: Int
  trim: Float
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat, toFormatBase64: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat
    toFormatBase64: ImageFormat
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int
    trim: Float
    sizes: String

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean, duotone: DuotoneGradient, base64: Boolean, traceSVG: Potrace, toFormat: ImageFormat, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int, trim: Float): ImageSharpResize
}

interface WpNode {
  """The globally unique ID for the object"""
  id: ID!
}

interface WpUniformResourceIdentifiable implements WpNode & Node @isPlaceholder {
  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

interface WpContentNode implements WpNode & WpUniformResourceIdentifiable & Node {
  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The ID of the node in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the ContentNode type and the ContentType type"""
type WpContentNodeToContentTypeConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpContentTypeConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpContentType!
}

interface WpOneToOneConnectionType implements WpEdgeType @isPlaceholder {
  """The connected node"""
  node: WpNode!
}

interface WpEdgeType @isPlaceholder {
  """The connected node"""
  node: WpNode!
}

interface WpContentTypeConnectionEdgeType implements WpEdgeType @isPlaceholder {
  """The connected ContentType Node"""
  node: WpContentType!
}

"""An Post Type object"""
type WpContentType implements WpNode & WpUniformResourceIdentifiable & Node @dontInfer {
  """
  The url path of the first page of the archive page for this content type.
  """
  archivePath: String

  """Whether this content type should can be exported."""
  canExport: Boolean

  """Connection between the ContentType type and the Taxonomy type"""
  connectedTaxonomies: WpContentTypeToTaxonomyConnectionType

  """Connection between the ContentType type and the ContentNode type"""
  contentNodes: WpContentTypeToContentNodeConnectionType

  """
  Whether content of this type should be deleted when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean

  """Description of the content type."""
  description: String

  """
  Whether to exclude nodes of this content type from front end search results.
  """
  excludeFromSearch: Boolean

  """The plural name of the content type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the content type within the GraphQL Schema."""
  graphqlSingleName: String

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean

  """Whether the content type is hierarchical, for example pages."""
  hierarchical: Boolean

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """Display name of the content type."""
  label: String

  """Details about the content type labels."""
  labels: WpPostTypeLabelDetails

  """The name of the icon file to display as a menu icon."""
  menuIcon: String

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String

  """
  Whether a content type is intended for use publicly either via the admin
  interface or by front-end users. While the default settings of
  exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are
  inherited from public, each does not rely on this relationship and controls a
  very specific intention.
  """
  public: Boolean

  """
  Whether queries can be performed on the front end for the content type as part of parse_request().
  """
  publiclyQueryable: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """Makes this content type available via the admin bar."""
  showInAdminBar: Boolean

  """Whether to add the content type to the GraphQL Schema."""
  showInGraphql: Boolean

  """
  Where to show the content type in the admin menu. To work, $show_ui must be
  true. If true, the post type is shown in its own top level menu. If false, no
  menu is shown. If a string of an existing top level menu (eg.
  &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type
  will be placed as a sub-menu of that.
  """
  showInMenu: Boolean

  """Makes this content type available for selection in navigation menus."""
  showInNavMenus: Boolean

  """
  Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing this content type in the admin.
  """
  showUi: Boolean

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the ContentType type and the Taxonomy type"""
type WpContentTypeToTaxonomyConnectionType implements WpTaxonomyConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTaxonomy!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentTypeToTaxonomyConnectionPageInfoType!
}

interface WpTaxonomyConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected Taxonomy Nodes"""
  nodes: [WpTaxonomy!]!

  """Information about pagination in a connection."""
  pageInfo: WpTaxonomyConnectionPageInfoType!
}

"""A taxonomy object"""
type WpTaxonomy implements WpNode & Node @dontInfer {
  """
  The url path of the first page of the archive page for this content type.
  """
  archivePath: String

  """List of Content Types associated with the Taxonomy"""
  connectedContentTypes: WpTaxonomyToContentTypeConnectionType

  """List of Term Nodes associated with the Taxonomy"""
  connectedTerms: WpTaxonomyToTermNodeConnectionType

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String

  """Whether the taxonomy is hierarchical"""
  hierarchical: Boolean

  """Name of the taxonomy shown in the menu. Usually plural."""
  label: String

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String

  """Whether the taxonomy is publicly queryable"""
  public: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean

  """Whether to show the taxonomy in the admin menu"""
  showInMenu: Boolean

  """Whether the taxonomy is available for selection in navigation menus."""
  showInNavMenus: Boolean

  """Whether to show the taxonomy in the quick/bulk edit panel."""
  showInQuickEdit: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
  nodeType: String
}

"""Connection between the Taxonomy type and the ContentType type"""
type WpTaxonomyToContentTypeConnectionType implements WpContentTypeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentType!]!

  """Information about pagination in a connection."""
  pageInfo: WpTaxonomyToContentTypeConnectionPageInfoType!
}

interface WpContentTypeConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected ContentType Nodes"""
  nodes: [WpContentType!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentTypeConnectionPageInfoType!
}

interface WpContentTypeConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpConnectionType @isPlaceholder {
  """A list of connected nodes"""
  nodes: [WpNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpPageInfoType!
}

interface WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;TaxonomyToContentTypeConnection&quot;"""
type WpTaxonomyToContentTypeConnectionPageInfoType implements WpContentTypeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Taxonomy type and the TermNode type"""
type WpTaxonomyToTermNodeConnectionType implements WpTermNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTermNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpTaxonomyToTermNodeConnectionPageInfoType!
}

interface WpTermNodeConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected TermNode Nodes"""
  nodes: [WpTermNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpTermNodeConnectionPageInfoType!
}

interface WpTermNode implements WpNode & WpUniformResourceIdentifiable & Node {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

interface WpTermNodeConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;TaxonomyToTermNodeConnection&quot;"""
type WpTaxonomyToTermNodeConnectionPageInfoType implements WpTermNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpTaxonomyConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;ContentTypeToTaxonomyConnection&quot;"""
type WpContentTypeToTaxonomyConnectionPageInfoType implements WpTaxonomyConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the ContentType type and the ContentNode type"""
type WpContentTypeToContentNodeConnectionType implements WpContentNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentTypeToContentNodeConnectionPageInfoType!
}

interface WpContentNodeConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected ContentNode Nodes"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpContentNodeConnectionPageInfoType!
}

interface WpContentNodeConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;ContentTypeToContentNodeConnection&quot;"""
type WpContentTypeToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Details for labels of the PostType"""
type WpPostTypeLabelDetails {
  """Default is ‘Add New’ for both hierarchical and non-hierarchical types."""
  addNew: String

  """Label for adding a new singular item."""
  addNewItem: String

  """Label to signify all items in a submenu link."""
  allItems: String

  """Label for archives in nav menus"""
  archives: String

  """Label for the attributes meta box."""
  attributes: String

  """Label for editing a singular item."""
  editItem: String

  """Label for the Featured Image meta box title."""
  featuredImage: String

  """Label for the table views hidden heading."""
  filterItemsList: String

  """Label for the media frame button."""
  insertIntoItem: String

  """Label for the table hidden heading."""
  itemsList: String

  """Label for the table pagination hidden heading."""
  itemsListNavigation: String

  """Label for the menu name."""
  menuName: String

  """General name for the post type, usually plural."""
  name: String

  """Label for the new item page title."""
  newItem: String

  """Label used when no items are found."""
  notFound: String

  """Label used when no items are in the trash."""
  notFoundInTrash: String

  """Label used to prefix parents of hierarchical items."""
  parentItemColon: String

  """Label for removing the featured image."""
  removeFeaturedImage: String

  """Label for searching plural items."""
  searchItems: String

  """Label for setting the featured image."""
  setFeaturedImage: String

  """Name for one object of this post type."""
  singularName: String

  """Label for the media frame filter."""
  uploadedToThisItem: String

  """Label in the media frame for using a featured image."""
  useFeaturedImage: String

  """Label for viewing a singular item."""
  viewItem: String

  """Label for viewing post type archives."""
  viewItems: String
}

"""Connection between the ContentNode type and the User type"""
type WpContentNodeToEditLastConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpUserConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpUser!
}

interface WpUserConnectionEdgeType implements WpEdgeType @isPlaceholder {
  """The connected User Node"""
  node: WpUser!
}

"""A User object"""
type WpUser implements WpNode & WpUniformResourceIdentifiable & WpCommenter & WpDatabaseIdentifier & Node @dontInfer {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String

  """A list of capabilities (permissions) granted to the user"""
  capabilities: [String]

  """Connection between the User type and the Comment type"""
  comments: WpUserToCommentConnectionType

  """Identifies the primary key from the database."""
  databaseId: Int!

  """Description of the user."""
  description: String

  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String

  """
  A complete list of capabilities including capabilities inherited from a role.
  This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String

  """
  Display name of the user. This is equivalent to the WP_User-&gt;display_name property.
  """
  name: String

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String

  """Nickname of the user."""
  nickname: String

  """Connection between the User type and the page type"""
  pages: WpUserToPageConnectionType

  """Connection between the User type and the post type"""
  posts: WpUserToPostConnectionType

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String

  """Connection between the User type and the UserRole type"""
  roles: WpUserToUserRoleConnectionType

  """
  Whether the Toolbar should be displayed when the user is viewing the site.
  """
  shouldShowAdminToolbar: Boolean

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String

  """The unique resource identifier path"""
  uri: String

  """A website url that is associated with the user."""
  url: String

  """The Id of the user. Equivalent to WP_User-&gt;ID"""
  userId: Int

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
  nodeType: String
}

interface WpCommenter implements WpNode & WpDatabaseIdentifier & Node @isPlaceholder {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The email address of the author of a comment."""
  email: String

  """The globally unique identifier for the comment author."""
  id: ID!

  """The name of the author of a comment."""
  name: String

  """The url of the author of a comment."""
  url: String
  nodeType: String
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type WpAvatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a
  404 instead of a default image), &#039;retro&#039; (8bit),
  &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face),
  &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;,
  &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039;
  (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String

  """HTML attributes to insert in the IMG element. Is not sanitized."""
  extraAttr: String

  """Whether to always show the default image, never the Gravatar."""
  forceDefault: Boolean

  """Whether the avatar was successfully found."""
  foundAvatar: Boolean

  """Height of the avatar image."""
  height: Int

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;,
  &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String

  """Type of url scheme to use. Typically HTTP vs. HTTPS."""
  scheme: String

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int

  """URL for the gravatar image source."""
  url: String

  """Width of the avatar image."""
  width: Int
}

interface WpDatabaseIdentifier @isPlaceholder {
  """The unique identifier stored in the database"""
  databaseId: Int!
}

"""Connection between the User type and the Comment type"""
type WpUserToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToCommentConnectionPageInfoType!
}

interface WpCommentConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected Comment Nodes"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpCommentConnectionPageInfoType!
}

"""A Comment object"""
type WpComment implements WpNode & WpDatabaseIdentifier & WpUniformResourceIdentifiable & Node @dontInfer {
  """
  User agent used to post the comment. This field is equivalent to
  WP_Comment-&gt;comment_agent and the value matching the
  &quot;comment_agent&quot; column in SQL.
  """
  agent: String

  """
  The approval status of the comment. This field is equivalent to
  WP_Comment-&gt;comment_approved and the value matching the
  &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean

  """The author of the comment"""
  author: WpCommentToCommenterConnectionEdgeType

  """
  IP address for the author at the time of commenting. This field is equivalent
  to WP_Comment-&gt;comment_author_IP and the value matching the
  &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String

  """ID for the comment, unique among comments."""
  commentId: Int

  """Connection between the Comment type and the ContentNode type"""
  commentedOn: WpCommentToContentNodeConnectionEdgeType

  """
  Content of the comment. This field is equivalent to
  WP_Comment-&gt;comment_content and the value matching the
  &quot;comment_content&quot; column in SQL.
  """
  content: String

  """The unique identifier stored in the database"""
  databaseId: Int!

  """
  Date the comment was posted in local time. This field is equivalent to
  WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: Date @dateformat

  """
  Date the comment was posted in GMT. This field is equivalent to
  WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt: Date @dateformat

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """
  Karma value for the comment. This field is equivalent to
  WP_Comment-&gt;comment_karma and the value matching the
  &quot;comment_karma&quot; column in SQL.
  """
  karma: Int

  """The permalink of the comment"""
  link: String

  """Connection between the Comment type and the Comment type"""
  wpParent: WpCommentToParentCommentConnectionEdgeType

  """
  The database id of the parent comment node or null if it is the root comment
  """
  parentDatabaseId: Int

  """The globally unique identifier of the parent comment node."""
  parentId: ID

  """Connection between the Comment type and the Comment type"""
  replies: WpCommentToCommentConnectionType

  """
  The approval status of the comment. This field is equivalent to
  WP_Comment-&gt;comment_approved and the value matching the
  &quot;comment_approved&quot; column in SQL.
  """
  status: WpCommentStatusEnum

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and
  the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the Comment type and the Commenter type"""
type WpCommentToCommenterConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpCommenterConnectionEdgeType {
  """The email address representing the author for this particular comment"""
  email: String

  """
  IP address of the author at the time of making this comment. This field is
  equivalent to WP_Comment-&gt;comment_author_IP and the value matching the
  &quot;comment_author_IP&quot; column in SQL.
  """
  ipAddress: String

  """The display name of the comment author for this particular comment"""
  name: String

  """The node of the connection, without the edges"""
  node: WpCommenter!

  """The url entered for the comment author on this particular comment"""
  url: String
}

interface WpCommenterConnectionEdgeType implements WpEdgeType @isPlaceholder {
  """The connected Commenter Node"""
  node: WpCommenter!
}

"""Connection between the Comment type and the ContentNode type"""
type WpCommentToContentNodeConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpContentNodeConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpContentNode!
}

interface WpContentNodeConnectionEdgeType implements WpEdgeType {
  """The connected ContentNode Node"""
  node: WpContentNode!
}

"""Connection between the Comment type and the Comment type"""
type WpCommentToParentCommentConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpCommentConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpComment!
}

interface WpCommentConnectionEdgeType implements WpEdgeType {
  """The connected Comment Node"""
  node: WpComment!
}

"""Connection between the Comment type and the Comment type"""
type WpCommentToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpCommentToCommentConnectionPageInfoType!
}

"""Page Info on the &quot;CommentToCommentConnection&quot;"""
type WpCommentToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpCommentConnectionPageInfoType implements WpPageInfoType @isPlaceholder {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The status of the comment object."""
enum WpCommentStatusEnum {
  APPROVE
  HOLD
  SPAM
  TRASH
}

"""Page Info on the &quot;UserToCommentConnection&quot;"""
type WpUserToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the User type and the page type"""
type WpUserToPageConnectionType implements WpPageConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPage!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToPageConnectionPageInfoType!
}

interface WpPageConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected page Nodes"""
  nodes: [WpPage!]!

  """Information about pagination in a connection."""
  pageInfo: WpPageConnectionPageInfoType!
}

"""The page type"""
type WpPage implements WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithContentEditor & WpNodeWithAuthor & WpNodeWithFeaturedImage & WpNodeWithComments & WpNodeWithRevisions & WpNodeWithPageAttributes & WpHierarchicalContentNode & WpHierarchicalNode & WpMenuItemLinkable & Node @dontInfer {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionType

  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionType

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the Page type and the Comment type"""
  comments: WpPageToCommentConnectionType

  """The content of the post."""
  content: String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeType

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """Whether the page object is password protected."""
  hasPassword: Boolean

  """Fields of the HomeBanner ACF Field Group"""
  homeBanner: WpHomeBanner

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether this page is set to the blog posts page."""
  isPostsPage: Boolean!

  """Whether this page is set to the privacy page."""
  isPrivacyPage: Boolean!

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """The id field matches the WP_Post-&gt;ID field."""
  pageId: Int!

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The password for the page object."""
  password: String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """Fields of the TestTemplateFields ACF Field Group"""
  testTemplateFields: WpTestTemplateFields

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

interface WpNodeWithTemplate implements WpNode & Node @isPlaceholder {
  """The globally unique ID for the object"""
  id: ID!

  """The template assigned to the node"""
  template: WpContentTemplate
  nodeType: String
}

interface WpContentTemplate {
  """The name of the template"""
  templateName: String
}

interface WpNodeWithTitle implements WpNode & Node @isPlaceholder {
  """The globally unique ID for the object"""
  id: ID!

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String
  nodeType: String
}

interface WpNodeWithContentEditor implements WpNode & Node @isPlaceholder {
  """The content of the post."""
  content: String

  """The globally unique ID for the object"""
  id: ID!
  nodeType: String
}

interface WpNodeWithAuthor implements WpNode & Node @isPlaceholder {
  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The globally unique ID for the object"""
  id: ID!
  nodeType: String
}

"""Connection between the NodeWithAuthor type and the User type"""
type WpNodeWithAuthorToUserConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpUserConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpUser!
}

interface WpNodeWithFeaturedImage implements WpNode & Node @isPlaceholder {
  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeType

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """The globally unique ID for the object"""
  id: ID!
  nodeType: String
}

"""
Connection between the NodeWithFeaturedImage type and the MediaItem type
"""
type WpNodeWithFeaturedImageToMediaItemConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpMediaItemConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpMediaItem!
}

interface WpMediaItemConnectionEdgeType implements WpEdgeType {
  """The connected mediaItem Node"""
  node: WpMediaItem!
}

"""The mediaItem type"""
type WpMediaItem implements WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithAuthor & WpNodeWithComments & WpHierarchicalContentNode & WpHierarchicalNode & Node & RemoteFile @dontInfer {
  """Alternative text to display when resource is not displayed"""
  altText: String

  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionType

  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The caption for the resource"""
  caption: String

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionType

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the MediaItem type and the Comment type"""
  comments: WpMediaItemToCommentConnectionType

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """Description of the image (stored as post_content)"""
  description: String

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  The filename of the mediaItem for the specified size (default size is full)
  """
  file: String

  """The path to the original file relative to the uploads directory"""
  filePath: String

  """The filesize in bytes of the resource"""
  fileSize: Int

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """Whether the attachment object is password protected."""
  hasPassword: Boolean

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """Details about the mediaItem"""
  mediaDetails: WpMediaDetails

  """The id field matches the WP_Post-&gt;ID field."""
  mediaItemId: Int!

  """Url of the mediaItem"""
  mediaItemUrl: String

  """Type of resource"""
  mediaType: String

  """The mime type of the mediaItem"""
  mimeType: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The password for the attachment object."""
  password: String

  """The sizes attribute value for an image."""
  sizes: String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """Url of the mediaItem"""
  sourceUrl: String

  """
  The srcset attribute specifies the URL of the image to use in different
  situations. It is a comma separated string of urls and their widths.
  """
  srcSet: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """The unique resource identifier path"""
  uri: String
  nodeType: String
  localFile: File @link(from: "localFile.id", by: "id")
}

interface WpNodeWithComments implements WpNode & Node @isPlaceholder {
  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """The globally unique ID for the object"""
  id: ID!
  nodeType: String
}

interface WpHierarchicalContentNode implements WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpHierarchicalNode & Node @isPlaceholder {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpHierarchicalContentNodeToContentNodeAncestorsConnectionType

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  wpChildren: WpHierarchicalContentNodeToContentNodeChildrenConnectionType

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """The parent of the node. The parent object can be of various types"""
  wpParent: WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to a node of content"""
  template: WpContentTemplate

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToContentNodeAncestorsConnectionType implements WpContentNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoType!
}

"""
Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot;
"""
type WpHierarchicalContentNodeToContentNodeAncestorsConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToContentNodeChildrenConnectionType implements WpContentNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoType!
}

"""
Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot;
"""
type WpHierarchicalContentNodeToContentNodeChildrenConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type WpHierarchicalContentNodeToParentContentNodeConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpContentNodeConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpContentNode!
}

interface WpHierarchicalNode implements WpNode & WpDatabaseIdentifier & Node @isPlaceholder {
  """The unique identifier stored in the database"""
  databaseId: Int!

  """The globally unique ID for the object"""
  id: ID!

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
  nodeType: String
}

"""Connection between the MediaItem type and the Comment type"""
type WpMediaItemToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpMediaItemToCommentConnectionPageInfoType!
}

"""Page Info on the &quot;MediaItemToCommentConnection&quot;"""
type WpMediaItemToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""File details for a Media Item"""
type WpMediaDetails {
  """The filename of the mediaItem"""
  file: String

  """The path to the mediaItem relative to the uploads directory"""
  filePath: String

  """The height of the mediaItem"""
  height: Int

  """Meta information associated with the mediaItem"""
  meta: WpMediaItemMeta

  """The available sizes of the mediaItem"""
  sizes: [WpMediaSize]

  """The width of the mediaItem"""
  width: Int
}

"""Meta connected to a MediaItem"""
type WpMediaItemMeta {
  """Aperture measurement of the media item."""
  aperture: Float

  """Information about the camera used to create the media item."""
  camera: String

  """The text string description associated with the media item."""
  caption: String

  """Copyright information associated with the media item."""
  copyright: String

  """The date/time when the media was created."""
  createdTimestamp: Int

  """The original creator of the media item."""
  credit: String

  """The focal length value of the media item."""
  focalLength: Float

  """
  The ISO (International Organization for Standardization) value of the media item.
  """
  iso: Int

  """List of keywords used to describe or identfy the media item."""
  keywords: [String]

  """The vertical or horizontal aspect of the media item."""
  orientation: String

  """The shutter speed information of the media item."""
  shutterSpeed: Float

  """A useful title for the media item."""
  title: String
}

"""Details of an available size for a media item"""
type WpMediaSize {
  """The filename of the referenced size"""
  file: String

  """The path of the file for the referenced size (default size is full)"""
  filePath: String

  """The filesize of the resource"""
  fileSize: Int

  """The height of the referenced size"""
  height: String

  """The mime type of the referenced size"""
  mimeType: String

  """The referenced size name"""
  name: String

  """The url of the referenced size"""
  sourceUrl: String

  """The width of the referenced size"""
  width: String
}

interface WpNodeWithRevisions implements WpNode & Node @isPlaceholder {
  """The globally unique ID for the object"""
  id: ID!

  """True if the node is a revision of another node"""
  isRevision: Boolean
  nodeType: String
}

interface WpNodeWithPageAttributes implements WpNode & Node @isPlaceholder {
  """The globally unique ID for the object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int
  nodeType: String
}

interface WpMenuItemLinkable implements WpNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & Node @isPlaceholder {
  """The unique identifier stored in the database"""
  databaseId: Int!

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the Page type and the Comment type"""
type WpPageToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpPageToCommentConnectionPageInfoType!
}

"""Page Info on the &quot;PageToCommentConnection&quot;"""
type WpPageToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
The &quot;HomeBanner&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WpHomeBanner implements WpHomeBanner_Fields & WpAcfFieldGroup & WpAcfFieldGroupFields {
  """
  Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomeBanner&quot; Field Group
  """
  bannerImage: WpAcfMediaItemConnectionEdgeType

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomeBanner&quot; Field Group
  """
  bannerSubtitle: String

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomeBanner&quot; Field Group
  """
  bannerTitle: String

  """The name of the field group"""
  fieldGroupName: String
}

interface WpHomeBanner_Fields implements WpAcfFieldGroup & WpAcfFieldGroupFields @isPlaceholder {
  """
  Field of the &quot;image&quot; Field Type added to the schema as part of the &quot;HomeBanner&quot; Field Group
  """
  bannerImage: WpAcfMediaItemConnectionEdgeType

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomeBanner&quot; Field Group
  """
  bannerSubtitle: String

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;HomeBanner&quot; Field Group
  """
  bannerTitle: String

  """The name of the field group"""
  fieldGroupName: String
}

"""Connection between the HomeBanner_Fields type and the MediaItem type"""
type WpAcfMediaItemConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpMediaItemConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpMediaItem!
}

interface WpAcfFieldGroup @isPlaceholder {
  """The name of the field group"""
  fieldGroupName: String
}

interface WpAcfFieldGroupFields @isPlaceholder {
  """The name of the field group"""
  fieldGroupName: String
}

"""
The &quot;TestTemplateFields&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WpTestTemplateFields implements WpTestTemplateFields_Fields & WpAcfFieldGroup & WpAcfFieldGroupFields {
  """The name of the field group"""
  fieldGroupName: String

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;TestTemplateFields&quot; Field Group
  """
  templateDesc: String

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;TestTemplateFields&quot; Field Group
  """
  templateName: String
}

interface WpTestTemplateFields_Fields implements WpAcfFieldGroup & WpAcfFieldGroupFields @isPlaceholder {
  """The name of the field group"""
  fieldGroupName: String

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;TestTemplateFields&quot; Field Group
  """
  templateDesc: String

  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;TestTemplateFields&quot; Field Group
  """
  templateName: String
}

interface WpPageConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;UserToPageConnection&quot;"""
type WpUserToPageConnectionPageInfoType implements WpPageConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the User type and the post type"""
type WpUserToPostConnectionType implements WpPostConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToPostConnectionPageInfoType!
}

interface WpPostConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected post Nodes"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostConnectionPageInfoType!
}

"""The post type"""
type WpPost implements WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithContentEditor & WpNodeWithAuthor & WpNodeWithFeaturedImage & WpNodeWithExcerpt & WpNodeWithComments & WpNodeWithTrackbacks & WpNodeWithRevisions & WpMenuItemLinkable & Node @dontInfer {
  """The ancestors of the content node."""
  ancestors: WpPostToPostConnectionType

  """Connection between the NodeWithAuthor type and the User type"""
  author: WpNodeWithAuthorToUserConnectionEdgeType

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """Connection between the Post type and the category type"""
  categories: WpPostToCategoryConnectionType

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the Post type and the Comment type"""
  comments: WpPostToCommentConnectionType

  """The content of the post."""
  content: String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """The excerpt of the post."""
  excerpt: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeType

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """Whether the post object is password protected."""
  hasPassword: Boolean

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """Whether this page is sticky"""
  isSticky: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """The parent of the content node."""
  wpParent: WpPostToParentConnectionEdgeType

  """The password for the post object."""
  password: String

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Connection between the Post type and the postFormat type"""
  postFormats: WpPostToPostFormatConnectionType

  """The id field matches the WP_Post-&gt;ID field."""
  postId: Int!

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Connection between the Post type and the tag type"""
  tags: WpPostToTagConnectionType

  """The template assigned to the node"""
  template: WpContentTemplate

  """Connection between the Post type and the TermNode type"""
  terms: WpPostToTermNodeConnectionType

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """URLs queued to be pinged."""
  toPing: [String]

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

interface WpNodeWithExcerpt implements WpNode & Node @isPlaceholder {
  """The excerpt of the post."""
  excerpt: String

  """The globally unique ID for the object"""
  id: ID!
  nodeType: String
}

interface WpNodeWithTrackbacks implements WpNode & Node @isPlaceholder {
  """The globally unique ID for the object"""
  id: ID!

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """URLs queued to be pinged."""
  toPing: [String]
  nodeType: String
}

"""Connection between the Post type and the post type"""
type WpPostToPostConnectionType implements WpPostConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToPostConnectionPageInfoType!
}

"""Page Info on the &quot;PostToPostConnection&quot;"""
type WpPostToPostConnectionPageInfoType implements WpPostConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpPostConnectionPageInfoType implements WpPageInfoType @isPlaceholder {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Post type and the category type"""
type WpPostToCategoryConnectionType implements WpCategoryConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToCategoryConnectionPageInfoType!
}

interface WpCategoryConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected category Nodes"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryConnectionPageInfoType!
}

"""The category type"""
type WpCategory implements WpNode & WpTermNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpHierarchicalTermNode & WpHierarchicalNode & WpMenuItemLinkable & Node @dontInfer {
  """
  The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors: WpCategoryToAncestorsCategoryConnectionType

  """The id field matches the WP_Post-&gt;ID field."""
  categoryId: Int

  """Connection between the category type and its children categories."""
  wpChildren: WpCategoryToCategoryConnectionType

  """Connection between the Category type and the ContentNode type"""
  contentNodes: WpCategoryToContentNodeConnectionType

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the category type and its parent category."""
  wpParent: WpCategoryToParentCategoryConnectionEdgeType

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the Category type and the post type"""
  posts: WpCategoryToPostConnectionType

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the Category type and the Taxonomy type"""
  taxonomy: WpCategoryToTaxonomyConnectionEdgeType

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

interface WpHierarchicalTermNode implements WpNode & WpTermNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpHierarchicalNode & Node @isPlaceholder {
  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """The globally unique ID for the object"""
  id: ID!

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the Category type and the category type"""
type WpCategoryToAncestorsCategoryConnectionType implements WpCategoryConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToAncestorsCategoryConnectionPageInfoType!
}

"""Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot;"""
type WpCategoryToAncestorsCategoryConnectionPageInfoType implements WpCategoryConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpCategoryConnectionPageInfoType implements WpPageInfoType @isPlaceholder {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Category type and the category type"""
type WpCategoryToCategoryConnectionType implements WpCategoryConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpCategory!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToCategoryConnectionPageInfoType!
}

"""Page Info on the &quot;CategoryToCategoryConnection&quot;"""
type WpCategoryToCategoryConnectionPageInfoType implements WpCategoryConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Category type and the ContentNode type"""
type WpCategoryToContentNodeConnectionType implements WpContentNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToContentNodeConnectionPageInfoType!
}

"""Page Info on the &quot;CategoryToContentNodeConnection&quot;"""
type WpCategoryToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Category type and the category type"""
type WpCategoryToParentCategoryConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpCategoryConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpCategory!
}

interface WpCategoryConnectionEdgeType implements WpEdgeType {
  """The connected category Node"""
  node: WpCategory!
}

"""Connection between the Category type and the post type"""
type WpCategoryToPostConnectionType implements WpPostConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpCategoryToPostConnectionPageInfoType!
}

"""Page Info on the &quot;CategoryToPostConnection&quot;"""
type WpCategoryToPostConnectionPageInfoType implements WpPostConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Category type and the Taxonomy type"""
type WpCategoryToTaxonomyConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpTaxonomyConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpTaxonomy!
}

interface WpTaxonomyConnectionEdgeType implements WpEdgeType {
  """The connected Taxonomy Node"""
  node: WpTaxonomy!
}

"""Page Info on the &quot;PostToCategoryConnection&quot;"""
type WpPostToCategoryConnectionPageInfoType implements WpCategoryConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Post type and the Comment type"""
type WpPostToCommentConnectionType implements WpCommentConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpComment!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToCommentConnectionPageInfoType!
}

"""Page Info on the &quot;PostToCommentConnection&quot;"""
type WpPostToCommentConnectionPageInfoType implements WpCommentConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Post type and the post type"""
type WpPostToParentConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpPostConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpPost!
}

interface WpPostConnectionEdgeType implements WpEdgeType {
  """The connected post Node"""
  node: WpPost!
}

"""Connection between the Post type and the postFormat type"""
type WpPostToPostFormatConnectionType implements WpPostFormatConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPostFormat!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToPostFormatConnectionPageInfoType!
}

interface WpPostFormatConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected postFormat Nodes"""
  nodes: [WpPostFormat!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostFormatConnectionPageInfoType!
}

"""The postFormat type"""
type WpPostFormat implements WpNode & WpTermNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & Node @dontInfer {
  """Connection between the PostFormat type and the ContentNode type"""
  contentNodes: WpPostFormatToContentNodeConnectionType

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The id field matches the WP_Post-&gt;ID field."""
  postFormatId: Int

  """Connection between the PostFormat type and the post type"""
  posts: WpPostFormatToPostConnectionType

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the PostFormat type and the Taxonomy type"""
  taxonomy: WpPostFormatToTaxonomyConnectionEdgeType

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the PostFormat type and the ContentNode type"""
type WpPostFormatToContentNodeConnectionType implements WpContentNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostFormatToContentNodeConnectionPageInfoType!
}

"""Page Info on the &quot;PostFormatToContentNodeConnection&quot;"""
type WpPostFormatToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the PostFormat type and the post type"""
type WpPostFormatToPostConnectionType implements WpPostConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostFormatToPostConnectionPageInfoType!
}

"""Page Info on the &quot;PostFormatToPostConnection&quot;"""
type WpPostFormatToPostConnectionPageInfoType implements WpPostConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the PostFormat type and the Taxonomy type"""
type WpPostFormatToTaxonomyConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpTaxonomyConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpTaxonomy!
}

interface WpPostFormatConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;PostToPostFormatConnection&quot;"""
type WpPostToPostFormatConnectionPageInfoType implements WpPostFormatConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Post type and the tag type"""
type WpPostToTagConnectionType implements WpTagConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTag!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToTagConnectionPageInfoType!
}

interface WpTagConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected tag Nodes"""
  nodes: [WpTag!]!

  """Information about pagination in a connection."""
  pageInfo: WpTagConnectionPageInfoType!
}

"""The tag type"""
type WpTag implements WpNode & WpTermNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpMenuItemLinkable & Node @dontInfer {
  """Connection between the Tag type and the ContentNode type"""
  contentNodes: WpTagToContentNodeConnectionType

  """The number of objects connected to the object"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the Tag type and the post type"""
  posts: WpTagToPostConnectionType

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The id field matches the WP_Post-&gt;ID field."""
  tagId: Int

  """Connection between the Tag type and the Taxonomy type"""
  taxonomy: WpTagToTaxonomyConnectionEdgeType

  """The name of the taxonomy that the object is associated with"""
  taxonomyName: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the Tag type and the ContentNode type"""
type WpTagToContentNodeConnectionType implements WpContentNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpContentNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpTagToContentNodeConnectionPageInfoType!
}

"""Page Info on the &quot;TagToContentNodeConnection&quot;"""
type WpTagToContentNodeConnectionPageInfoType implements WpContentNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Tag type and the post type"""
type WpTagToPostConnectionType implements WpPostConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpPost!]!

  """Information about pagination in a connection."""
  pageInfo: WpTagToPostConnectionPageInfoType!
}

"""Page Info on the &quot;TagToPostConnection&quot;"""
type WpTagToPostConnectionPageInfoType implements WpPostConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Tag type and the Taxonomy type"""
type WpTagToTaxonomyConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpTaxonomyConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpTaxonomy!
}

interface WpTagConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;PostToTagConnection&quot;"""
type WpPostToTagConnectionPageInfoType implements WpTagConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Post type and the TermNode type"""
type WpPostToTermNodeConnectionType implements WpTermNodeConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTermNode!]!

  """Information about pagination in a connection."""
  pageInfo: WpPostToTermNodeConnectionPageInfoType!
}

"""Page Info on the &quot;PostToTermNodeConnection&quot;"""
type WpPostToTermNodeConnectionPageInfoType implements WpTermNodeConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;UserToPostConnection&quot;"""
type WpUserToPostConnectionPageInfoType implements WpPostConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the User type and the UserRole type"""
type WpUserToUserRoleConnectionType implements WpUserRoleConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpUserRole!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserToUserRoleConnectionPageInfoType!
}

interface WpUserRoleConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected UserRole Nodes"""
  nodes: [WpUserRole!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserRoleConnectionPageInfoType!
}

"""A user role object"""
type WpUserRole implements WpNode & Node @dontInfer {
  """The capabilities that belong to this role"""
  capabilities: [String]

  """The display name of the role"""
  displayName: String

  """The registered name of the role"""
  name: String
  nodeType: String
}

interface WpUserRoleConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;UserToUserRoleConnection&quot;"""
type WpUserToUserRoleConnectionPageInfoType implements WpUserRoleConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpTermNodeConnectionEdgeType implements WpEdgeType {
  """The connected TermNode Node"""
  node: WpTermNode!
}

"""Connection between the ContentNode type and the User type"""
type WpContentNodeToEditLockConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpUserConnectionEdgeType {
  """The timestamp for when the node was last edited"""
  lockTimestamp: String

  """The node of the connection, without the edges"""
  node: WpUser!
}

interface WpMediaItemConnectionType implements WpConnectionType {
  """A list of connected mediaItem Nodes"""
  nodes: [WpMediaItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMediaItemConnectionPageInfoType!
}

interface WpMediaItemConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpPageConnectionEdgeType implements WpEdgeType {
  """The connected page Node"""
  node: WpPage!
}

"""Connection between the NodeWithRevisions type and the ContentNode type"""
type WpNodeWithRevisionsToContentNodeConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpContentNodeConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpContentNode!
}

interface WpPostFormatConnectionEdgeType implements WpEdgeType {
  """The connected postFormat Node"""
  node: WpPostFormat!
}

interface WpTagConnectionEdgeType implements WpEdgeType {
  """The connected tag Node"""
  node: WpTag!
}

interface WpUserRoleConnectionEdgeType implements WpEdgeType {
  """The connected UserRole Node"""
  node: WpUserRole!
}

"""All of the registered settings"""
type WpSettings {
  """Settings of the the string Settings Group"""
  discussionSettingsDefaultCommentStatus: String

  """Settings of the the string Settings Group"""
  discussionSettingsDefaultPingStatus: String

  """Settings of the the string Settings Group"""
  generalSettingsDateFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsDescription: String

  """Settings of the the string Settings Group"""
  generalSettingsEmail: String

  """Settings of the the string Settings Group"""
  generalSettingsLanguage: String

  """Settings of the the integer Settings Group"""
  generalSettingsStartOfWeek: Int

  """Settings of the the string Settings Group"""
  generalSettingsTimeFormat: String

  """Settings of the the string Settings Group"""
  generalSettingsTimezone: String

  """Settings of the the string Settings Group"""
  generalSettingsTitle: String

  """Settings of the the string Settings Group"""
  generalSettingsUrl: String

  """Settings of the the integer Settings Group"""
  readingSettingsPageForPosts: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPageOnFront: Int

  """Settings of the the integer Settings Group"""
  readingSettingsPostsPerPage: Int

  """Settings of the the string Settings Group"""
  readingSettingsShowOnFront: String

  """Settings of the the integer Settings Group"""
  writingSettingsDefaultCategory: Int

  """Settings of the the string Settings Group"""
  writingSettingsDefaultPostFormat: String

  """Settings of the the boolean Settings Group"""
  writingSettingsUseSmilies: Boolean
}

"""The discussion setting type"""
type WpDiscussionSettings {
  """Allow people to submit comments on new posts."""
  defaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  defaultPingStatus: String
}

"""The general setting type"""
type WpGeneralSettings {
  """A date format for all date strings."""
  dateFormat: String

  """Site tagline."""
  description: String

  """This address is used for admin purposes, like new user notification."""
  email: String

  """WordPress locale code."""
  language: String

  """A day number of the week that the week should start on."""
  startOfWeek: Int

  """A time format for all time strings."""
  timeFormat: String

  """A city in the same timezone as you."""
  timezone: String

  """Site title."""
  title: String

  """Site URL."""
  url: String
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu
locations, which are typically registered by the active theme.
"""
type WpMenu implements WpNode & WpDatabaseIdentifier & Node @dontInfer {
  """The number of items in the menu"""
  count: Int

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The locations a menu is assigned to"""
  locations: [WpMenuLocationEnum]

  """WP ID of the nav menu."""
  menuId: Int

  """Connection between the Menu type and the MenuItem type"""
  menuItems: WpMenuToMenuItemConnectionType

  """Display name of the menu. Equivalent to WP_Term-&gt;name."""
  name: String

  """The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"""
  slug: String
  nodeType: String
}

"""Registered menu locations"""
enum WpMenuLocationEnum {
  FOOTER_MENU
  FOOTER_MENU_2
  FOOTER_MENU_3
  HEADER_MENU
  PRIMARY_MENU
}

"""Connection between the Menu type and the MenuItem type"""
type WpMenuToMenuItemConnectionType implements WpMenuItemConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpMenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuToMenuItemConnectionPageInfoType!
}

interface WpMenuItemConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected MenuItem Nodes"""
  nodes: [WpMenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuItemConnectionPageInfoType!
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type WpMenuItem implements WpNode & WpDatabaseIdentifier & Node @dontInfer {
  """Connection between the MenuItem type and the MenuItem type"""
  childItems: WpMenuItemToMenuItemConnectionType

  """Connection from MenuItem to it&#039;s connected node"""
  connectedNode: WpMenuItemToMenuItemLinkableConnectionEdgeType

  """The object connected to this menu item."""
  connectedObject: WpMenuItemObjectUnion

  """Class attribute for the menu item link"""
  cssClasses: [String]

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Description of the menu item."""
  description: String

  """Label or title of the menu item."""
  label: String

  """Link relationship (XFN) of the menu item."""
  linkRelationship: String

  """The locations the menu item&#039;s Menu is assigned to"""
  locations: [WpMenuLocationEnum]

  """The Menu a MenuItem is part of"""
  menu: WpMenuItemToMenuConnectionEdgeType

  """WP ID of the menu item."""
  menuItemId: Int

  """Menu item order"""
  order: Int

  """The database id of the parent menu item or null if it is the root"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent nav menu item object."""
  parentId: ID

  """
  Path for the resource. Relative path for internal resources. Absolute path for external resources.
  """
  path: String

  """Target attribute for the menu item link."""
  target: String

  """Title attribute for the menu item link"""
  title: String

  """The uri of the resource the menu item links to"""
  uri: String

  """URL or destination of the menu item."""
  url: String
  nodeType: String
}

"""Connection between the MenuItem type and the MenuItem type"""
type WpMenuItemToMenuItemConnectionType implements WpMenuItemConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpMenuItem!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuItemToMenuItemConnectionPageInfoType!
}

"""Page Info on the &quot;MenuItemToMenuItemConnection&quot;"""
type WpMenuItemToMenuItemConnectionPageInfoType implements WpMenuItemConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpMenuItemConnectionPageInfoType implements WpPageInfoType @isPlaceholder {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the MenuItem type and the MenuItemLinkable type"""
type WpMenuItemToMenuItemLinkableConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpMenuItemLinkableConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpMenuItemLinkable!
}

interface WpMenuItemLinkableConnectionEdgeType implements WpEdgeType @isPlaceholder {
  """The connected MenuItemLinkable Node"""
  node: WpMenuItemLinkable!
}

union WpMenuItemObjectUnion = WpPost | WpPage | WpTestimonial | WpCategory | WpTag

"""Connection between the MenuItem type and the Menu type"""
type WpMenuItemToMenuConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpMenuConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpMenu!
}

interface WpMenuConnectionEdgeType implements WpEdgeType @isPlaceholder {
  """The connected Menu Node"""
  node: WpMenu!
}

"""Page Info on the &quot;MenuToMenuItemConnection&quot;"""
type WpMenuToMenuItemConnectionPageInfoType implements WpMenuItemConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

interface WpMenuItemConnectionEdgeType implements WpEdgeType {
  """The connected MenuItem Node"""
  node: WpMenuItem!
}

type WpTestimonial implements WpNode & WpContentNode & WpUniformResourceIdentifiable & WpDatabaseIdentifier & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithContentEditor & WpNodeWithFeaturedImage & WpMenuItemLinkable & Node @isPlaceholder @dontInfer {
  """The id field matches the WP_Post-&gt;ID field."""
  testimonialId: Int!

  """The ancestors of the content node."""
  ancestors: WpTestimonialToTestimonialConnectionType

  """The content of the post."""
  content: String

  """Connection between the ContentNode type and the ContentType type"""
  contentType: WpContentNodeToContentTypeConnectionEdgeType

  """The name of the Content Type the node belongs to"""
  contentTypeName: String!

  """The unique identifier stored in the database"""
  databaseId: Int!

  """Post publishing date."""
  date: Date @dateformat

  """The publishing date set in GMT."""
  dateGmt: Date @dateformat

  """The desired slug of the post"""
  desiredSlug: String

  """The RSS enclosure for the object"""
  enclosure: String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdgeType

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """Whether the testimonial object is password protected."""
  hasPassword: Boolean

  """Whether the node is a Comment"""
  isComment: Boolean!

  """Whether the node is a Content Node"""
  isContentNode: Boolean!

  """Whether the node represents the front page."""
  isFrontPage: Boolean!

  """Whether  the node represents the blog page."""
  isPostsPage: Boolean!

  """Whether the node is a Term"""
  isTermNode: Boolean!

  """The user that most recently edited the node"""
  lastEditedBy: WpContentNodeToEditLastConnectionEdgeType

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: Date @dateformat

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: Date @dateformat

  """The parent of the content node."""
  wpParent: WpTestimonialToParentConnectionEdgeType

  """The password for the testimonial object."""
  password: String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to the node"""
  template: WpContentTemplate

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title: String

  """The unique resource identifier path"""
  uri: String
  nodeType: String
}

"""Connection between the Testimonial type and the Testimonial type"""
type WpTestimonialToTestimonialConnectionType implements WpTestimonialConnectionType & WpConnectionType {
  """The nodes of the connection, without the edges"""
  nodes: [WpTestimonial!]!

  """Information about pagination in a connection."""
  pageInfo: WpTestimonialToTestimonialConnectionPageInfoType!
}

interface WpTestimonialConnectionType implements WpConnectionType @isPlaceholder {
  """A list of connected Testimonial Nodes"""
  nodes: [WpTestimonial!]!

  """Information about pagination in a connection."""
  pageInfo: WpTestimonialConnectionPageInfoType!
}

interface WpTestimonialConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Page Info on the &quot;TestimonialToTestimonialConnection&quot;"""
type WpTestimonialToTestimonialConnectionPageInfoType implements WpTestimonialConnectionPageInfoType & WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Connection between the Testimonial type and the Testimonial type"""
type WpTestimonialToParentConnectionEdgeType implements WpOneToOneConnectionType & WpEdgeType & WpTestimonialConnectionEdgeType {
  """The node of the connection, without the edges"""
  node: WpTestimonial!
}

interface WpTestimonialConnectionEdgeType implements WpEdgeType {
  """The connected Testimonial Node"""
  node: WpTestimonial!
}

interface WpMenuConnectionType implements WpConnectionType {
  """A list of connected Menu Nodes"""
  nodes: [WpMenu!]!

  """Information about pagination in a connection."""
  pageInfo: WpMenuConnectionPageInfoType!
}

interface WpMenuConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The reading setting type"""
type WpReadingSettings {
  """The ID of the page that should display the latest posts"""
  pageForPosts: Int

  """The ID of the page that should be displayed on the front page"""
  pageOnFront: Int

  """Blog pages show at most."""
  postsPerPage: Int

  """What to show on the front page"""
  showOnFront: String
}

interface WpUserConnectionType implements WpConnectionType {
  """A list of connected User Nodes"""
  nodes: [WpUser!]!

  """Information about pagination in a connection."""
  pageInfo: WpUserConnectionPageInfoType!
}

interface WpUserConnectionPageInfoType implements WpPageInfoType {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Information needed by gatsby-source-wordpress."""
type WpWPGatsby {
  """Returns wether or not pretty permalinks are enabled."""
  arePrettyPermalinksEnabled: Boolean

  """Wether or not the Preview frontend URL is online."""
  isPreviewFrontendOnline: Boolean
}

"""The writing setting type"""
type WpWritingSettings {
  """Default post category."""
  defaultCategory: Int

  """Default post format."""
  defaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  useSmilies: Boolean
}

"""A Comment Author object"""
type WpCommentAuthor implements WpNode & WpCommenter & WpDatabaseIdentifier & Node @dontInfer {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: WpAvatar

  """The unique identifier stored in the database"""
  databaseId: Int!

  """The email for the comment author"""
  email: String

  """The name for the comment author."""
  name: String

  """The url the comment author."""
  url: String
  nodeType: String
}

"""The template assigned to the node"""
type WpDefaultTemplate implements WpContentTemplate {
  """The name of the template"""
  templateName: String
}

"""Non-node WPGraphQL root fields."""
type Wp implements Node @dontInfer {
  """Entry point to get all settings for the site"""
  allSettings: WpSettings

  """Fields of the &#039;DiscussionSettings&#039; settings group"""
  discussionSettings: WpDiscussionSettings

  """Fields of the &#039;GeneralSettings&#039; settings group"""
  generalSettings: WpGeneralSettings

  """Fields of the &#039;ReadingSettings&#039; settings group"""
  readingSettings: WpReadingSettings

  """Information needed by gatsby-source-wordpress."""
  wpGatsby: WpWPGatsby

  """Fields of the &#039;WritingSettings&#039; settings group"""
  writingSettings: WpWritingSettings
  nodeType: String
}